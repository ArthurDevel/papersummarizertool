# HOW TO RUN FOR LOCAL DEVELOPMENT:
# 1. Copy this file to `docker-compose.override.yaml`:
#    cp docker-compose.override.yaml.example docker-compose.override.yaml
# 2. Run the following command from your terminal in the project root:
#
#    docker-compose up --build
#
# This will start all services with hot-reloading enabled for both frontend and backend code.

services:
  app:
    # In development, we mount the entire project directory into the container.
    # This is simpler and more robust than mounting each subdirectory individually.
    # Any new modules or files will be automatically available in the container.
    volumes:
      - .:/app
      # This is a Docker trick to preserve the node_modules created during the image build.
      # It prevents the local mount from overwriting it, giving us fast startup times.
      - /app/frontend/node_modules

    # Override the default command to run the frontend and backend dev servers with hot reloading.
    # We run 'npm install' first to ensure dependencies are up to date if package.json changes.
    command: >
      sh -c "cd /app/frontend && npm install && 
             cd /app && uvicorn api.main:app --host 0.0.0.0 --port ${CONTAINERPORT_API:-8000} --reload & 
             cd /app/frontend && npm run dev"

    # We still expose the frontend port to the host for browser access.
    ports:
      - "${HOSTPORT_FRONTEND:-3000}:${CONTAINERPORT_FRONTEND:-3000}"
      # The backend API port is also exposed. This isn't strictly necessary for the app
      # to run, but it allows for direct API testing from the host with tools like curl or Postman.
      - "${HOSTPORT_API:-8000}:${CONTAINERPORT_API:-8000}"

  airflow-webserver:
    volumes:
      - .:/opt/airflow # Mount project to access DAGs and code for hot-reloading

  airflow-scheduler:
    volumes:
      - .:/opt/airflow # Mount project to access DAGs and code for hot-reloading
